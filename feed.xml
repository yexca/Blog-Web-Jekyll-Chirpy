

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://blog.yexca.net/</id>
  <title>yexca'Blog</title>
  <subtitle>yexca,blog,技术,博客,技术博客</subtitle>
  <updated>2024-01-28T14:30:20+08:00</updated>
  <author>
    <name>yexca</name>
    <uri>https://blog.yexca.net/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://blog.yexca.net/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh"
    href="https://blog.yexca.net/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2024 yexca </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Fedora 开机启动运行脚本</title>
    <link href="https://blog.yexca.net/archives/149" rel="alternate" type="text/html" title="Fedora 开机启动运行脚本" />
    <published>2024-01-28T14:25:00+08:00</published>
  
    <updated>2024-01-28T14:25:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/149</id>
    <content src="https://blog.yexca.net/archives/149" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="Linux" />
    
  

  
    <summary>
      





      引言

千万不要把死循环放进去啊！！！使用 systemd 方式

新建脚本

在此文件中写入您的脚本

vi /etc/rc.d/rc.local


赋予执行权限

chmod +x /etc/rc.d/rc.local


编辑启动状态

编辑文件

vi /usr/lib/systemd/system/rc-local.service


在最后一行加入 [Install]

#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as published by
#  the Free Software F...
    </summary>
  

  </entry>

  
  <entry>
    <title>JavaScript 学习</title>
    <link href="https://blog.yexca.net/archives/148" rel="alternate" type="text/html" title="JavaScript 学习" />
    <published>2024-01-22T19:51:00+08:00</published>
  
    <updated>2024-01-22T19:51:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/148</id>
    <content src="https://blog.yexca.net/archives/148" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="前端" />
    
    <category term="JavaScript" />
    
  

  
    <summary>
      





      JS 是一门跨平台、面向对象的脚本语言，是用来控制网页行为的，使网页可交互

JS 引入方式

分为内部脚本和外部脚本两种

内部脚本

将 js 代码定义在 HTML 页面中


  JS 代码必须位于 &amp;lt;script&amp;gt;&amp;lt;/script&amp;gt; 标签之间
  在 HTML 文档中，可以在任意地方，放置任意数量的 &amp;lt;script&amp;gt;
  一般会把脚本置于 &amp;lt;body&amp;gt; 元素的底部，可以改善显示速度


&amp;lt;script&amp;gt;
	alert("Hello JavaScript")
&amp;lt;/script&amp;gt;


外部脚本

将 JS 代码定义在外部 JS 文件中，然后引入到 HTML 页面中


  外部 JS 文件中，只包含 JS 代码，不包含 &amp;lt;script&amp;gt; 标签


&amp;lt;html&amp;gt;
    &amp;lt;head...
    </summary>
  

  </entry>

  
  <entry>
    <title>三层架构与分层解耦</title>
    <link href="https://blog.yexca.net/archives/147" rel="alternate" type="text/html" title="三层架构与分层解耦" />
    <published>2024-01-19T10:37:00+08:00</published>
  
    <updated>2024-01-19T10:37:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/147</id>
    <content src="https://blog.yexca.net/archives/147" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="后端" />
    
    <category term="Spring" />
    
  

  
    <summary>
      





      案例引入

获取员工数据，返回统一响应结果，在页面渲染展示

首先需要引入 dom4j 依赖，用于解析 xml 文件

&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.dom4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;dom4j&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.1.3&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;


引入解析 XML 的工具类 XMLParserUtils、对应实体类 Emp、XML 文件 emp.xml

引入静态页面文件，放在 resources/static


  SpringBoot 项目的静态资源 (h5+css+js 等前端资源) 默认存放目录为 clsspath:/static, classpath:/p...
    </summary>
  

  </entry>

  
  <entry>
    <title>HTML 学习一 - 基础</title>
    <link href="https://blog.yexca.net/archives/146" rel="alternate" type="text/html" title="HTML 学习一 - 基础" />
    <published>2024-01-18T14:43:00+08:00</published>
  
    <updated>2024-01-18T14:43:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/146</id>
    <content src="https://blog.yexca.net/archives/146" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="前端" />
    
    <category term="HTML" />
    
  

  
    <summary>
      





      基本骨架

&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;网页标题&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        网页主体
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;


一般有软件生成，例如在 VS Code 里可以新建 .html 文件后输入英文 ! 按 TAB 键自动生成

head 标签一般是面向浏览器，body 标签面向用户

注释

&amp;lt;!-- 注释内容 --&amp;gt;


在 VS Code 中可以选中该行，使用快捷键 Ctrl + / 一键注释

浏览器不会显示注释的内容

标题与段落

&amp;lt;h1&amp;gt;一级标题&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;二级标题&amp;lt;/h2&amp;gt;
&amp;lt;h3&amp;gt;三级标题&amp;lt...
    </summary>
  

  </entry>

  
  <entry>
    <title>结构化开发</title>
    <link href="https://blog.yexca.net/archives/145" rel="alternate" type="text/html" title="结构化开发" />
    <published>2024-01-16T08:10:00+08:00</published>
  
    <updated>2024-01-16T08:10:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/145</id>
    <content src="https://blog.yexca.net/archives/145" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="软件工程" />
    
  

  
    <summary>
      





      系统设计的基本原理

抽象、模块化、信息隐蔽、模块独立

模块化

在软件的体系结构中，模块是可组合、分解和更换的单元

模块化是指将一个待开发的软件分解成若干个小的简单部分，即模块。每个模块可独立地开发、测试，最后组装成完整的程序。这是一种复杂问题 “分而治之” 的原则。模块化的目的是使程序的结构清晰，容易阅读、理解、测试和修改

模块独立

模块独立是指每个模块完成一个相对独立的特定子功能，并且与其他模块之间的联系简单。衡量模块独立程度的标准有两个：耦合性和内聚性

耦合

耦合是模块之间的相对独立性 (互相连接的紧密程度) 的度量。耦合取决于各个模块之间接口的复杂程度、调用模块的方式以及通过接口的信息类型等。一般模块之间可能的耦合方式有 7 种类型




  无直接耦合。指两个模块之间没有直接的关系，它们分别从属于不同模块的控制与调用，它们之间不传递任何信息
  数据耦合。指...
    </summary>
  

  </entry>

</feed>


