

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://blog.yexca.net/</id>
  <title>yexca'Blog</title>
  <subtitle>yexca,blog,技术,博客,技术博客</subtitle>
  <updated>2024-05-14T11:15:22+08:00</updated>
  <author>
    <name>yexca</name>
    <uri>https://blog.yexca.net/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://blog.yexca.net/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh"
    href="https://blog.yexca.net/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2024 yexca </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>博客运行时间</title>
    <link href="https://blog.yexca.net/archives/172" rel="alternate" type="text/html" title="博客运行时间" />
    <published>2024-05-14T11:08:00+08:00</published>
  
    <updated>2024-05-14T11:08:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/172</id>
    <content src="https://blog.yexca.net/archives/172" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="日常" />
    
    <category term="网站建设" />
    
  

  
    <summary>
      





      引言

毕业论文真是折磨呢。这是什么时候的文章呢，这个文件创建时间 2023.11.30 而修改时间 2022.09.18，我看不懂，但我大受震撼

代码

&amp;lt;script&amp;gt;
    function secondToDate(second) {
        if (!second) {
            return 0;
        }
        var time = new Array(0, 0, 0, 0, 0);
        if (second &amp;gt;= 365 * 24 * 3600) {
            time[0] = parseInt(second / (365 * 24 * 3600));
            second %= 365 * 24 * 3600;
        }
        if (se...
    </summary>
  

  </entry>

  
  <entry>
    <title>Gateway 服务网关</title>
    <link href="https://blog.yexca.net/archives/171" rel="alternate" type="text/html" title="Gateway 服务网关" />
    <published>2024-05-05T00:54:00+08:00</published>
  
    <updated>2024-05-05T00:54:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/171</id>
    <content src="https://blog.yexca.net/archives/171" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="后端" />
    
    <category term="Spring" />
    
  

  
    <summary>
      





      Gateway  是所有微服务的统一入口，有以下功能


  身份认证和权限检验：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截
  请求路由、负载均衡：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡
  请求限流：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大


SpringCloud 的网关实现有两种


  Zuul：基于 Servlet 实现，属于阻塞式编程
  SpringCloudGateway：基于 Spring5 中提供的 WebFlux，属于响应式编程的实现，具备更好的性能


简单入门

创建项目，引入依赖

&amp;lt;!--网关--&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt...
    </summary>
  

  </entry>

  
  <entry>
    <title>Feign 远程调用</title>
    <link href="https://blog.yexca.net/archives/170" rel="alternate" type="text/html" title="Feign 远程调用" />
    <published>2024-05-03T23:11:00+08:00</published>
  
    <updated>2024-05-03T23:11:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/170</id>
    <content src="https://blog.yexca.net/archives/170" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="后端" />
    
    <category term="Spring" />
    
  

  
    <summary>
      





      Feign是一个声明式的 Http 客户端，Github：https://github.com/OpenFeign/feign

简单使用

引入依赖

&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-openfeign&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;


在启动类添加注解开启 Feign 的功能

@EnableFeignClients
@SpringBootApplication


编写 Feign 客户端

@FeignClient("userService")
public interface UserClient {
    @Ge...
    </summary>
  

  </entry>

  
  <entry>
    <title>Nacos 注册中心</title>
    <link href="https://blog.yexca.net/archives/169" rel="alternate" type="text/html" title="Nacos 注册中心" />
    <published>2024-05-02T22:36:00+08:00</published>
  
    <updated>2024-05-02T22:36:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/169</id>
    <content src="https://blog.yexca.net/archives/169" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="后端" />
    
    <category term="Spring" />
    
  

  
    <summary>
      





      需先安装软件，官网：https://nacos.io/zh-cn/

在 conf/application.properties 文件中可以更改端口，默认为 8848

注册服务

父工程中添加管理依赖

&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-alibaba-dependencies&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.2.6.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
    &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;


注释掉 E...
    </summary>
  

  </entry>

  
  <entry>
    <title>Ribbon 负载均衡</title>
    <link href="https://blog.yexca.net/archives/168" rel="alternate" type="text/html" title="Ribbon 负载均衡" />
    <published>2024-04-28T15:50:00+08:00</published>
  
    <updated>2024-04-28T15:50:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/168</id>
    <content src="https://blog.yexca.net/archives/168" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="后端" />
    
    <category term="Spring" />
    
  

  
    <summary>
      





      消费者发起请求会被 Ribbon 拦截，Ribbon 从 Eureka 拉取提供者列表，Eureka 返回提供者列表，Ribbon 根据 IRule 选择服务器发起请求

详细拦截：请求-&amp;gt;DynamicServerListLoadBalancer (获取url中的服务id,userService)-&amp;gt;DynamicServerListLoadBalancer-&amp;gt;Eureka-&amp;gt;DynamicServerListLoadBalancer-&amp;gt;IRule-&amp;gt;DynamicServerListLoadBalancer -&amp;gt;发起请求

负载均衡策略


  
    
      内置负载均衡规则类
      规则描述
    
  
  
    
      ZoneAvoidanceRule(Eureka 默认)
      以区域可用的服务...
    </summary>
  

  </entry>

</feed>


