

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://blog.yexca.net/</id>
  <title>yexca'Blog</title>
  <subtitle>yexca,blog,技术,博客,技术博客</subtitle>
  <updated>2023-10-29T23:49:01+08:00</updated>
  <author>
    <name>yexca</name>
    <uri>https://blog.yexca.net/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://blog.yexca.net/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://blog.yexca.net/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2023 yexca </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>网易云音乐 2020-2022 年度报告</title>
    <link href="https://blog.yexca.net/archives/130" rel="alternate" type="text/html" title="网易云音乐 2020-2022 年度报告" />
    <published>2023-10-29T23:45:00+08:00</published>
  
    <updated>2023-10-29T23:45:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/130</id>
    <content src="https://blog.yexca.net/archives/130" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="日常" />
    
  

  
    <summary>
      





      网站

手机访问即可查看 (只试过 IOS)

2020:https://st.music.163.com/c/year2020

2021:https://st.music.163.com/c/year2021

2022:https://st.music.163.com/c/year2022

过程

Google 搜索 网易云年度报告，发现 https://st.music.163.com/c/reportreview2020 (手机访问情况下会出现 2020 年度报告入口)，顺着网站试着修改年份，发现 2020-2022 可以查看

    </summary>
  

  </entry>

  
  <entry>
    <title>Linux 学习 Index</title>
    <link href="https://blog.yexca.net/archives/129" rel="alternate" type="text/html" title="Linux 学习 Index" />
    <published>2023-10-21T14:18:00+08:00</published>
  
    <updated>2023-10-21T14:18:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/129</id>
    <content src="https://blog.yexca.net/archives/129" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="Linux" />
    
  

  
    <summary>
      





      此文章写于 2022.12，由于多种原因未发布

该系列文章为我阅读《Linux 系统管理、服务器设置、安全、云数据中心》所书写相关笔记

第一部分：入门

这部分没有记录文章


  第 01 章 开始使用 Linux


Linux 的历史。总结：Linux NB


  第 02 章 创建完美的 Linux 桌面


然后有了 Fedora 桌面折腾



第二部分：成为一名 Linux 高级用户


  第 03 章 使用 shell


shell 的一些用法与变量


  第 04 章 在文件系统中移动


文件相关 shell 命令、元字符、文件权限


  第 05 章 使用文本文件


vi 编辑器、查找文件 (locate 、find 、grep)


  第 06 章 管理运行中的进程


列出进程，杀死进程，限制进程


  第 07 章 编写简单的 shel...
    </summary>
  

  </entry>

  
  <entry>
    <title>中介者模式</title>
    <link href="https://blog.yexca.net/archives/128" rel="alternate" type="text/html" title="中介者模式" />
    <published>2023-10-15T17:14:00+08:00</published>
  
    <updated>2023-10-15T19:17:43+08:00</updated>
  
    <id>https://blog.yexca.net/archives/128</id>
    <content src="https://blog.yexca.net/archives/128" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="软件工程" />
    
  

  
    <summary>
      





      Mediator Pattern 对象行为型模式

意图

用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间地交互

结构



其中：


  Mediator (中介者) 定义一个接口用于各同事 (Colleague) 对象通信
  ConcreteMediator (具体中介中介) 通过协调各同事对象实现协作行为；了解并维护它的各个同事
  Colleague class (同事类) 知道它的中介者对象；每一个同事类对象在需要与其他同事通信的时候与它的中介者通信


适用性

Mediator 模式适用于：


  一组对象以定义良好但是复杂的方式进行通信，产生的相互依赖关系结构混乱且难以理解
  一个对象引用其他很多对象并且直接与这些对象通信，导致难以复用该对象
  想定制一个分布在多个类中的行为，而又不想...
    </summary>
  

  </entry>

  
  <entry>
    <title>迭代器模式</title>
    <link href="https://blog.yexca.net/archives/127" rel="alternate" type="text/html" title="迭代器模式" />
    <published>2023-10-12T09:09:00+08:00</published>
  
    <updated>2023-10-15T19:17:43+08:00</updated>
  
    <id>https://blog.yexca.net/archives/127</id>
    <content src="https://blog.yexca.net/archives/127" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="软件工程" />
    
  

  
    <summary>
      





      Iterator Pattern 对象行为型模式

意图

提供一种方法顺序访问一个聚合对象中的各个元素，且不需要暴露该对象的内部表示

结构



其中：


  Iterator (迭代器) 定义访问和遍历元素的接口
  ConcreteIterator (具体迭代器) 实现迭代器接口；对该聚合遍历时跟踪当前位置
  Aggregate (聚合) 定义创建相应迭代器对象的接口
  ConcreteAggregate (具体聚合) 实现创建相应迭代器的接口，该操作返回 ConcreteIterator 的一个适当的实例


适用性

Iterator 模式适用于：


  访问一个聚合对象的内容而无需暴露它的内部表示
  支持对聚合对象的多种遍历
  为遍历不同的聚合结构提供一个统一的接口


利用 Java 已实现迭代器

import java.util.ArrayList;
...
    </summary>
  

  </entry>

  
  <entry>
    <title>解释器模式</title>
    <link href="https://blog.yexca.net/archives/126" rel="alternate" type="text/html" title="解释器模式" />
    <published>2023-10-09T17:31:00+08:00</published>
  
    <updated>2023-10-09T17:31:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/126</id>
    <content src="https://blog.yexca.net/archives/126" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="软件工程" />
    
  

  
    <summary>
      





      Interpreter Pattern 类行为型模式

意图

给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子

结构



其中：


  AbstractExpression 声明一个程序的解释操作，这个接口为抽象语法树中所有的结点所共享
  TerminalExpression 实现与文法中的终结符相关联的解释操作；一个句子中的每个终结符需要该类的一个实例
  NonterminalExpression 对文法中的每一条规则都需要一个 NonterminalExpression 类；为每个符号都维护一个 AbstractExpression 类型的实例变量；为文法中的非终结符实现解释 (Interpret) 操作
  Context 包含解释器之外的一些全局信息
  Client 构建 (或被给定) 表示该文法定义的语言中一个特定...
    </summary>
  

  </entry>

</feed>


