

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://blog.yexca.net/</id>
  <title>yexca'Blog</title>
  <subtitle>yexca,blog,技术,博客,技术博客</subtitle>
  <updated>2023-12-21T01:24:50+08:00</updated>
  <author>
    <name>yexca</name>
    <uri>https://blog.yexca.net/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://blog.yexca.net/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh"
    href="https://blog.yexca.net/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2023 yexca </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>观察者模式</title>
    <link href="https://blog.yexca.net/archives/134" rel="alternate" type="text/html" title="观察者模式" />
    <published>2023-12-21T01:18:00+08:00</published>
  
    <updated>2023-12-21T01:18:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/134</id>
    <content src="https://blog.yexca.net/archives/134" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="软件工程" />
    
  

  
    <summary>
      





      观察者模式

Observer Pattern 对象行为型模式

意图
定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变吋，所有依赖于它的对象都得到通知并被自动更新
结构



其中：


  Subject (目标) 知道它的观察者，可以有任意多个观察者观察同一个目标；提供注册和删除观察者对象的接口
  Observer (观察者) 为那些在”目标发生改变时需获得通知的对象定义一个更新接口
  ConcreteSubject (具体目标) 将有关状态存入各 ConcreteObserver 对象：当它的状态发生改变时，向它的各个观察者发出通知
  ConcreteObserver (具体观察者) 维护一个指向 ConcreteSubject 对象的引用：存储有关状态，这些状态应与目标的状态保持一致：实现 Observer 的更新接口，以使自身状态与目标的状态保持一致


...
    </summary>
  

  </entry>

  
  <entry>
    <title>hvdb 注册检测</title>
    <link href="https://blog.yexca.net/archives/133" rel="alternate" type="text/html" title="hvdb 注册检测" />
    <published>2023-12-02T21:23:00+08:00</published>
  
    <updated>2023-12-02T21:23:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/133</id>
    <content src="https://blog.yexca.net/archives/133" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="日常" />
    
  

  
    <summary>
      





      从 ???? 我记不清了 开始喜欢上 ASMR 后就接触到了音声，不过高昂的价格显然会驱使我去广袤的互联网上搜索，于是便知道了这个网站，可此网站只有登录后才可以看到更多内容，而每年也几乎是不定时开放注册，这使我很好奇这个网站

于是我便想着让服务器运行程序检测是否可以注册，然后通知

Github: yexca/hvdb

目标

检测是否可以注册，如果可以便通过 Telegram 通知

检测是否可以注册

在灵梦广场的一个帖子回复中可以获知当开放注册时 login 的底下会出现 register

那便可以用一种最简朴的方法，爬取这个网页，检查是否有此单词

Bot 配置

使用 Telegram 的 bot 通知需要先注册一个 bot

对话 https://t.me/BotFather 输入 /newbot 指令按照步骤创建一个 bot

和刚创建的 bot 对话，发送 he...
    </summary>
  

  </entry>

  
  <entry>
    <title>备忘录模式</title>
    <link href="https://blog.yexca.net/archives/132" rel="alternate" type="text/html" title="备忘录模式" />
    <published>2023-11-27T14:08:00+08:00</published>
  
    <updated>2023-11-27T14:08:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/132</id>
    <content src="https://blog.yexca.net/archives/132" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="软件工程" />
    
  

  
    <summary>
      





      Memento Pattern 对象行为型模式

意图

在不破坏封装性的前提下捕获一个对象的内部状态，并在对象之外保存这个状态。这样以后就可以将对象恢复到原先保存的状态

结构



其中：


  Memento (备忘录) 存储原发器对象的内部状态，原发器根据需要决定备忘录存储原发器的哪些内部状态；防止原发器以外的其他对象访问备忘录
  Originator (原发器) 创建一个备忘录，用于记录当前时刻它的内部状态；使用备忘录恢复内部状态
  Caretaker (管理者) 负责保存好备忘录；不能对备忘录的内容进行操作或检查


适用性

Memento 模式适用于：


  必须保存一个对象在某一个时刻的 (部分) 状态，这样以后需要时它才能恢复到先前的状态
  如果一个用接口来让其他对象直接得到这些状态，将会暴露对象的实现细节并破坏对象的封装性


例子

import j...
    </summary>
  

  </entry>

  
  <entry>
    <title>2023 新服务器部署记录</title>
    <link href="https://blog.yexca.net/archives/131" rel="alternate" type="text/html" title="2023 新服务器部署记录" />
    <published>2023-11-03T15:34:00+08:00</published>
  
    <updated>2023-11-03T15:34:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/131</id>
    <content src="https://blog.yexca.net/archives/131" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="折腾记录" />
    
  

  
    <summary>
      





      自从博客转移到 Github 上后本打算就这样不再购买新服务器的，不过可能是这几个月很平静使得我迫切想折腾一阵，也可能是 我可以不用，但不能没有 的心理使我冲动消费了一次

目前的网站 (yexca.net 网域)


  个人介绍？：http://yexca.net (目前还是半成品)
  这个 Blog：http://blog.yexca.net
  怀旧 Blog：http://wp.yexca.net
  VRChat Blog：http://vrc.yexca.net
  VRChat Docs：http://vrchat.yexca.net
  Navidrome：http://music.yexca.net (自用)
  ACG：http://acg.yexca.net (要不是看 DNS 记录我都忘记了，暂时没想好做什么)
  xlog(Web3)：http://xl...
    </summary>
  

  </entry>

  
  <entry>
    <title>网易云音乐 2020-2022 年度报告</title>
    <link href="https://blog.yexca.net/archives/130" rel="alternate" type="text/html" title="网易云音乐 2020-2022 年度报告" />
    <published>2023-10-29T23:45:00+08:00</published>
  
    <updated>2023-10-29T23:45:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/130</id>
    <content src="https://blog.yexca.net/archives/130" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="日常" />
    
  

  
    <summary>
      





      网站

手机访问即可查看 (只试过 IOS)

2020:https://st.music.163.com/c/year2020

2021:https://st.music.163.com/c/year2021

2022:https://st.music.163.com/c/year2022

过程

Google 搜索 网易云年度报告，发现 https://st.music.163.com/c/reportreview2020 (手机访问情况下会出现 2020 年度报告入口)，顺着网站试着修改年份，发现 2020-2022 可以查看

    </summary>
  

  </entry>

</feed>


