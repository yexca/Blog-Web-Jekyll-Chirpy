

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://blog.yexca.net/</id>
  <title>yexca'Blog</title>
  <subtitle>yexca,blog,技术,博客,技术博客</subtitle>
  <updated>2024-07-28T14:31:36+08:00</updated>
  <author>
    <name>yexca</name>
    <uri>https://blog.yexca.net/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://blog.yexca.net/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh"
    href="https://blog.yexca.net/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2024 yexca </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>算法 n-皇后问题 回溯法</title>
    <link href="https://blog.yexca.net/archives/176" rel="alternate" type="text/html" title="算法 n-皇后问题 回溯法" />
    <published>2024-07-28T14:26:00+08:00</published>
  
    <updated>2024-07-28T14:26:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/176</id>
    <content src="https://blog.yexca.net/archives/176" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="编程基础" />
    
    <category term="算法" />
    
  

  
    <summary>
      





      问题描述

n-皇后问题是在 n 行 n 列的棋盘上放置 n 个皇后，使得皇后彼此之间不受攻击，其规则是任意两个皇后不在同一行、同一列和相同的对角线上 (也就算国际象棋的皇后移动范围)

问题分析

拟采用以下思路解决 n-皇后问题：

第 i 个皇后放在第 i 行

从第一个皇后开始，对每个皇后，从其对应行 (第 i 个皇后对应第 i 行) 的第一列开始尝试
若可以放置，确定位置，考虑下一个皇后
若与之前的皇后冲突，则考虑下一列
若超出最后一列，则重新确定上一个皇后的位置

重复该过程，直到找到所有的放置方案

C 代码

#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;math.h&amp;gt;

#define N 4 //皇后个数

// 判断第 k 个皇后目前放置位置是否与前面的皇后冲突
int isplace(int pos[], int k){
 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Typecho HTTPS 无法登录访问后台</title>
    <link href="https://blog.yexca.net/archives/175" rel="alternate" type="text/html" title="Typecho HTTPS 无法登录访问后台" />
    <published>2024-07-26T22:22:00+08:00</published>
  
    <updated>2024-07-26T22:22:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/175</id>
    <content src="https://blog.yexca.net/archives/175" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="日常" />
    
    <category term="网站建设" />
    
  

  
    <summary>
      





      引言

之前在移植 typecho 到 Docker 容器后，在开启 HTTPS 后登录后台将会报错，而将 HTTPS 关闭后则可以正常访问。因为在之前非 Docker 部署的时候可以正常访问，我以为是 Docker 网络的问题，而当时的修改是一次性的，不会再进行更新，所以我在关闭 HTTPS 修改完成后便不再管理。如今再次使用 typecho 再次遇到相同问题，考虑到需要更新文章，遂寻解决之法

解决方法

解决方法也非常简单，在 data/config.inc.php 文件最后添加如下代码

define('__TYPECHO_SECURE__', true);


然后重新启动即可

成因分析

参考资料中猜测是因为用户与浏览器之间是 HTTPS 交互，但实际上 PHP 接收到的是来自 Cloud Flare 的 HTTP 交互，所以 PHP 使用了 HTTP 进行响应从而构成...
    </summary>
  

  </entry>

  
  <entry>
    <title>ElementUI</title>
    <link href="https://blog.yexca.net/archives/174" rel="alternate" type="text/html" title="ElementUI" />
    <published>2024-06-03T18:04:00+08:00</published>
  
    <updated>2024-06-03T18:04:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/174</id>
    <content src="https://blog.yexca.net/archives/174" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="前端" />
    
  

  
    <summary>
      





      ElementUI 是饿了么团队开发的，一套为开发者、设计师和产品经理准备的基于 Vue2.0 的桌面端组件库

组件是组成网页的部件，例如超链接、按钮、图片、表格、表单、分页条等

Vue2.x 官网：国际 中国大陆

Vue3.x 官网：https://element-plus.org/zh-CN/#/zh-CN

安装

安装 ElementUI 库 (在当前工程的目录下)，命令

npm install element-ui@2.15.3


引入 ElementUI 组件库

import ElementUI from 'element-ui';
import 'element-ui/lib/theme-chalk/index.css';

Vue.use(ElementUI);


入门使用

创建 src/views/element/elementView.vue 组件...
    </summary>
  

  </entry>

  
  <entry>
    <title>简单Vue项目</title>
    <link href="https://blog.yexca.net/archives/173" rel="alternate" type="text/html" title="简单Vue项目" />
    <published>2024-05-28T16:22:00+08:00</published>
  
    <updated>2024-05-28T16:22:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/173</id>
    <content src="https://blog.yexca.net/archives/173" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="前端" />
    
  

  
    <summary>
      





      早期前后端混合开发，沟通成本高，分工不明确，不便管理，不便维护扩展

当前主流的开发模式为前后端分离，通过接口文档

前后端分离开发

前端根据接口文档传输参数根据响应数据解析，后端根据接口文档接收参数并响应

开发流程：需求分析-&amp;gt;接口定义 (API 接口文档)-&amp;gt;前后端并行开发 (遵守规范)-&amp;gt;测试-&amp;gt;前后端联调测试

在接口开发完成前可以用 YApi 进行测试

前端工程化

指在企业级的前端项目开发中，把前端开发所需的工具、技术、流程、经验等进行规范化、标准化


  模块化：JS、CSS
  组件化：UI 结构、样式、行为
  规范化：目录结构、编码、接口
  自动化：构建、部署、测试


Vue 脚手架

Vue-cli 是 Vue 官方提供的一个脚手架，用于快速生成一个 Vue 的项目模板，需要 NodeJS

Vue-cli 提供了如下功能：
...
    </summary>
  

  </entry>

  
  <entry>
    <title>博客运行时间</title>
    <link href="https://blog.yexca.net/archives/172" rel="alternate" type="text/html" title="博客运行时间" />
    <published>2024-05-14T11:08:00+08:00</published>
  
    <updated>2024-05-14T11:08:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/172</id>
    <content src="https://blog.yexca.net/archives/172" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="日常" />
    
    <category term="网站建设" />
    
  

  
    <summary>
      





      引言

毕业论文真是折磨呢。这是什么时候的文章呢，这个文件创建时间 2023.11.30 而修改时间 2022.09.18，我看不懂，但我大受震撼

代码

&amp;lt;script&amp;gt;
    function secondToDate(second) {
        if (!second) {
            return 0;
        }
        var time = new Array(0, 0, 0, 0, 0);
        if (second &amp;gt;= 365 * 24 * 3600) {
            time[0] = parseInt(second / (365 * 24 * 3600));
            second %= 365 * 24 * 3600;
        }
        if (se...
    </summary>
  

  </entry>

</feed>


