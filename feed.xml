

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://blog.yexca.net/</id>
  <title>yexca'Blog</title>
  <subtitle>yexca,blog,技术,博客,技术博客</subtitle>
  <updated>2024-06-03T18:08:54+08:00</updated>
  <author>
    <name>yexca</name>
    <uri>https://blog.yexca.net/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://blog.yexca.net/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh"
    href="https://blog.yexca.net/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2024 yexca </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>ElementUI</title>
    <link href="https://blog.yexca.net/archives/174" rel="alternate" type="text/html" title="ElementUI" />
    <published>2024-06-03T18:04:00+08:00</published>
  
    <updated>2024-06-03T18:04:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/174</id>
    <content src="https://blog.yexca.net/archives/174" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="前端" />
    
  

  
    <summary>
      





      ElementUI 是饿了么团队开发的，一套为开发者、设计师和产品经理准备的基于 Vue2.0 的桌面端组件库

组件是组成网页的部件，例如超链接、按钮、图片、表格、表单、分页条等

Vue2.x 官网：国际 中国大陆

Vue3.x 官网：https://element-plus.org/zh-CN/#/zh-CN

安装

安装 ElementUI 库 (在当前工程的目录下)，命令

npm install element-ui@2.15.3


引入 ElementUI 组件库

import ElementUI from 'element-ui';
import 'element-ui/lib/theme-chalk/index.css';

Vue.use(ElementUI);


入门使用

创建 src/views/element/elementView.vue 组件...
    </summary>
  

  </entry>

  
  <entry>
    <title>简单Vue项目</title>
    <link href="https://blog.yexca.net/archives/173" rel="alternate" type="text/html" title="简单Vue项目" />
    <published>2024-05-28T16:22:00+08:00</published>
  
    <updated>2024-05-28T16:22:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/173</id>
    <content src="https://blog.yexca.net/archives/173" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="前端" />
    
  

  
    <summary>
      





      早期前后端混合开发，沟通成本高，分工不明确，不便管理，不便维护扩展

当前主流的开发模式为前后端分离，通过接口文档

前后端分离开发

前端根据接口文档传输参数根据响应数据解析，后端根据接口文档接收参数并响应

开发流程：需求分析-&amp;gt;接口定义 (API 接口文档)-&amp;gt;前后端并行开发 (遵守规范)-&amp;gt;测试-&amp;gt;前后端联调测试

在接口开发完成前可以用 YApi 进行测试

前端工程化

指在企业级的前端项目开发中，把前端开发所需的工具、技术、流程、经验等进行规范化、标准化


  模块化：JS、CSS
  组件化：UI 结构、样式、行为
  规范化：目录结构、编码、接口
  自动化：构建、部署、测试


Vue 脚手架

Vue-cli 是 Vue 官方提供的一个脚手架，用于快速生成一个 Vue 的项目模板，需要 NodeJS

Vue-cli 提供了如下功能：
...
    </summary>
  

  </entry>

  
  <entry>
    <title>博客运行时间</title>
    <link href="https://blog.yexca.net/archives/172" rel="alternate" type="text/html" title="博客运行时间" />
    <published>2024-05-14T11:08:00+08:00</published>
  
    <updated>2024-05-14T11:08:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/172</id>
    <content src="https://blog.yexca.net/archives/172" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="日常" />
    
    <category term="网站建设" />
    
  

  
    <summary>
      





      引言

毕业论文真是折磨呢。这是什么时候的文章呢，这个文件创建时间 2023.11.30 而修改时间 2022.09.18，我看不懂，但我大受震撼

代码

&amp;lt;script&amp;gt;
    function secondToDate(second) {
        if (!second) {
            return 0;
        }
        var time = new Array(0, 0, 0, 0, 0);
        if (second &amp;gt;= 365 * 24 * 3600) {
            time[0] = parseInt(second / (365 * 24 * 3600));
            second %= 365 * 24 * 3600;
        }
        if (se...
    </summary>
  

  </entry>

  
  <entry>
    <title>Gateway 服务网关</title>
    <link href="https://blog.yexca.net/archives/171" rel="alternate" type="text/html" title="Gateway 服务网关" />
    <published>2024-05-05T00:54:00+08:00</published>
  
    <updated>2024-05-05T00:54:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/171</id>
    <content src="https://blog.yexca.net/archives/171" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="后端" />
    
    <category term="Spring" />
    
  

  
    <summary>
      





      Gateway  是所有微服务的统一入口，有以下功能


  身份认证和权限检验：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截
  请求路由、负载均衡：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡
  请求限流：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大


SpringCloud 的网关实现有两种


  Zuul：基于 Servlet 实现，属于阻塞式编程
  SpringCloudGateway：基于 Spring5 中提供的 WebFlux，属于响应式编程的实现，具备更好的性能


简单入门

创建项目，引入依赖

&amp;lt;!--网关--&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt...
    </summary>
  

  </entry>

  
  <entry>
    <title>Feign 远程调用</title>
    <link href="https://blog.yexca.net/archives/170" rel="alternate" type="text/html" title="Feign 远程调用" />
    <published>2024-05-03T23:11:00+08:00</published>
  
    <updated>2024-05-03T23:11:00+08:00</updated>
  
    <id>https://blog.yexca.net/archives/170</id>
    <content src="https://blog.yexca.net/archives/170" />
    <author>
      <name>yexca</name>
    </author>

  
    
    <category term="后端" />
    
    <category term="Spring" />
    
  

  
    <summary>
      





      Feign是一个声明式的 Http 客户端，Github：https://github.com/OpenFeign/feign

简单使用

引入依赖

&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-openfeign&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;


在启动类添加注解开启 Feign 的功能

@EnableFeignClients
@SpringBootApplication


编写 Feign 客户端

@FeignClient("userService")
public interface UserClient {
    @Ge...
    </summary>
  

  </entry>

</feed>


